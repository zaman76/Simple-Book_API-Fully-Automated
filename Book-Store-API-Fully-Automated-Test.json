{
	"info": {
		"_postman_id": "f33c6769-77c0-49ee-85a6-9be29661d60c",
		"name": "Book Store API Fully Automated Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22456484"
	},
	"item": [
		{
			"name": "User(Create User)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"console.log(jsonData.userID)\r",
							"if (pm.response.code === 201){\r",
							"    pm.collectionVariables.set(\"userID\", jsonData.userID);\r",
							"}\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Test username\", function () {\r",
							"    pm.expect(jsonData.username).to.eql(pm.collectionVariables.get(\"userName\"))\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userName\": \"{{userName}}\",\n  \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "https://bookstore.toolsqa.com/Account/v1/User",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "GenerateToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"token\", jsonData.token);\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Test token\", function () {\r",
							"    pm.expect(jsonData.token).to.eql(pm.collectionVariables.get(\"token\"))\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userName\": \"{{userName}}\",\n  \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "https://bookstore.toolsqa.com/Account/v1/GenerateToken",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"GenerateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the Authorization\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							" pm.expect(jsonData).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userName\": \"{{userName}}\",\n  \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "https://bookstore.toolsqa.com/Account/v1/Authorized",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"Authorized"
					]
				}
			},
			"response": []
		},
		{
			"name": "Orderd Book Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Test userID\", function () {\r",
							"    pm.expect(jsonData.userId).to.eql(pm.collectionVariables.get(\"userID\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Test username\", function () {\r",
							"    pm.expect(jsonData.username).to.eql(pm.collectionVariables.get(\"userName\"))\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://bookstore.toolsqa.com/Account/v1/User/{{userID}}",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "BookStore Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"isbn1\", response.books[0].isbn);\r",
							"pm.collectionVariables.set(\"isbn2\", response.books[1].isbn);\r",
							"pm.collectionVariables.set(\"isbn3\", response.books[2].isbn);\r",
							"pm.collectionVariables.set(\"forUpdatingOrderLater\", response.books[3].isbn);\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Test isbn1\", function () {\r",
							"    pm.expect(response.books[0].isbn).to.eql(pm.collectionVariables.get(\"isbn1\"))\r",
							"})\r",
							"pm.test(\"Test isbn2\", function () {\r",
							"    pm.expect(response.books[1].isbn).to.eql(pm.collectionVariables.get(\"isbn2\"))\r",
							"})\r",
							"pm.test(\"Test isbn3\", function () {\r",
							"    pm.expect(response.books[2].isbn).to.eql(pm.collectionVariables.get(\"isbn3\"))\r",
							"})\r",
							"pm.test(\"Test For Updating Order Later\", function () {\r",
							"    pm.expect(response.books[3].isbn).to.eql(pm.collectionVariables.get(\"forUpdatingOrderLater\"))\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://bookstore.toolsqa.com/BookStore/v1/Books",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ordering book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Test Fist order\", function () {\r",
							"    pm.expect(jsonData.books[0].isbn).to.eql(pm.collectionVariables.get(\"isbn1\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Test Second Order\", function () {\r",
							"    pm.expect(jsonData.books[1].isbn).to.eql(pm.collectionVariables.get(\"isbn2\"))\r",
							"})\r",
							"pm.test(\"Test Third Order\", function () {\r",
							"    pm.expect(jsonData.books[2].isbn).to.eql(pm.collectionVariables.get(\"isbn3\"))\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"{{userID}}\",\n  \"collectionOfIsbns\": [\n    {\n      \"isbn\": \"{{isbn1}}\"\n    },\n    {\n      \"isbn\": \"{{isbn2}}\"\n    },\n    {\n      \"isbn\": \"{{isbn3}}\"\n    }\n  ]\n}\n\n\n\n\n"
				},
				"url": {
					"raw": "https://bookstore.toolsqa.com/BookStore/v1/Books",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Orded Book Details 2 For Checking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"fist_orderd_book_in_the_list\", jsonData.books[0].isbn);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Test Fist order Book in the list\", function () {\r",
							"    pm.expect(jsonData.books[0].isbn).to.eql(pm.collectionVariables.get(\"fist_orderd_book_in_the_list\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Test userId\", function () {\r",
							"    pm.expect(jsonData.userId).to.eql(pm.collectionVariables.get(\"userID\"))\r",
							"})\r",
							"pm.test(\"Test User Name\", function () {\r",
							"    pm.expect(jsonData.username).to.eql(pm.collectionVariables.get(\"userName\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Test Fist order\", function () {\r",
							"    pm.expect(jsonData.books[0].isbn).to.eql(pm.collectionVariables.get(\"isbn1\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Test Second Order\", function () {\r",
							"    pm.expect(jsonData.books[1].isbn).to.eql(pm.collectionVariables.get(\"isbn2\"))\r",
							"})\r",
							"pm.test(\"Test Third Order\", function () {\r",
							"    pm.expect(jsonData.books[2].isbn).to.eql(pm.collectionVariables.get(\"isbn3\"))\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://bookstore.toolsqa.com/Account/v1/User/{{userID}}",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Isnb Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Test Fist order Book in the list\", function () {\r",
							"    pm.expect(jsonData.isbn).to.eql(pm.collectionVariables.get(\"fist_orderd_book_in_the_list\"))\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://bookstore.toolsqa.com/BookStore/v1/Book?ISBN={{fist_orderd_book_in_the_list}}",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Book"
					],
					"query": [
						{
							"key": "ISBN",
							"value": "{{fist_orderd_book_in_the_list}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Single Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"{{userID}}\",\n  \"isbn\": \"{{fist_orderd_book_in_the_list}}\",\n  \"message\": \"Deleted.\"\n}"
				},
				"url": {
					"raw": "https://bookstore.toolsqa.com/BookStore/v1/Book",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Book"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change the Order Number of a Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"if(response.books[0].isbn === pm.collectionVariables.get(\"forUpdatingOrderLater\")){\r",
							"    pm.test(\"Pass\")\r",
							"}else if(response.books[1].isbn === pm.collectionVariables.get(\"forUpdatingOrderLater\")){\r",
							"    pm.test(\"Pass\")\r",
							"}else if(response.books[2].isbn === pm.collectionVariables.get(\"forUpdatingOrderLater\")){\r",
							"    pm.test(\"Pass\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"{{userID}}\",\n  \"isbn\": \"{{forUpdatingOrderLater}}\"\n}"
				},
				"url": {
					"raw": "https://bookstore.toolsqa.com/BookStore/v1/Books/{{isbn2}}",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Books",
						"{{isbn2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://bookstore.toolsqa.com/BookStore/v1/Books?UserId={{userID}}",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					],
					"query": [
						{
							"key": "UserId",
							"value": "{{userID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User/{{userID}}(To delete account from bookstore)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://bookstore.toolsqa.com/Account/v1/User/{{userID}}",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{userID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userName",
			"value": "B12345678932",
			"type": "string"
		},
		{
			"key": "password",
			"value": "Test123#",
			"type": "string"
		},
		{
			"key": "userID",
			"value": "",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "isbn1",
			"value": "",
			"type": "string"
		},
		{
			"key": "isbn2",
			"value": "",
			"type": "string"
		},
		{
			"key": "isbn3",
			"value": "",
			"type": "string"
		},
		{
			"key": "fist_orderd_book_in_the_list",
			"value": "",
			"type": "string"
		},
		{
			"key": "forUpdatingOrderLater",
			"value": "",
			"type": "string"
		}
	]
}